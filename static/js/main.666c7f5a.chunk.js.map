{"version":3,"sources":["Loader/index.js","Card/index.js","Users/index.js","App.js","serviceWorker.js","index.js"],"names":["Loader","className","style","animationDelay","Card","data","src","avatar","alt","first_name","last_name","Users","userCards","users","map","user","key","id","App","useState","setUsers","noMoreUsers","setNoMoreUsers","useEffect","fetch","then","res","json","setTimeout","$","window","scroll","scrollTop","document","height","prevUsers","off","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sTAaeA,G,YAVA,WACX,OACI,yBAAKC,UAAU,oBACX,yBAAKA,UAAU,wBAAwBC,MAAO,CAACC,eAAgB,QAC/D,yBAAKF,UAAU,wBAAwBC,MAAO,CAACC,eAAgB,QAC/D,yBAAKF,UAAU,4BCIZG,G,MATF,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACX,OACI,yBAAKJ,UAAU,QACX,yBAAKA,UAAU,iBAAiB,yBAAKK,IAAKD,EAAKE,OAAQC,IAAI,UAC3D,qCAAOH,EAAKI,WAAZ,YAA0BJ,EAAKK,eCO5BC,G,MAVD,SAAC,GAAa,IAClBC,EADiB,EAAXC,MACYC,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,CAAMC,IAAKD,EAAKE,GAAIZ,KAAMU,OAE9D,OACI,yBAAKd,UAAU,SACVW,K,gBC6BEM,EAhCH,WAAO,IAAD,EACSC,mBAAS,IADlB,mBACVN,EADU,KACHO,EADG,OAEqBD,oBAAS,GAF9B,mBAEVE,EAFU,KAEGC,EAFH,KAuBjB,OApBAC,qBAAU,WACTC,MAAM,sCACJC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAApB,GACLuB,YAAW,kBAAMR,EAASf,EAAKA,QAAO,QAGxCwB,IAAEC,QAAQC,QAAO,WACZF,IAAEC,QAAQE,aAAeH,IAAEI,UAAUC,SAAWL,IAAEC,QAAQI,SAAW,IACxEV,MAAM,sCACJC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAApB,GACLe,GAAS,SAAAe,GAAS,4BAASA,GAAT,YAAuB9B,EAAKA,aAEhDwB,IAAEC,QAAQM,IAAI,UACdd,GAAe,SAGf,IAGF,yBAAKrB,UAAU,OACd,qCACEY,EAAQ,kBAAC,EAAD,CAAOA,MAAOA,IAAY,kBAAC,EAAD,MAClCQ,GAAe,8CCrBAgB,QACW,cAA7BP,OAAOQ,SAASC,UAEe,UAA7BT,OAAOQ,SAASC,UAEhBT,OAAOQ,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFV,SAASW,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.666c7f5a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './style.css'\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <div className='loader-container' >\r\n            <div className='circle pulsing-circle' style={{animationDelay: '0s'}} ></div>\r\n            <div className='circle pulsing-circle' style={{animationDelay: '2s'}} ></div>\r\n            <div className='circle static-circle' ></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Loader;","import React from 'react';\r\nimport './style.css'\r\n\r\nconst Card = ({data}) => {\r\n    return (\r\n        <div className='Card' >\r\n            <div className='img-container' ><img src={data.avatar} alt=\"user\"/></div>\r\n            <p>{`${data.first_name} ${data.last_name}`}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from '../Card'\r\nimport './style.css'\r\n\r\nconst Users = ({users}) => {\r\n    const userCards = users.map(user => <Card key={user.id} data={user} />)\r\n\r\n    return (\r\n        <div className='Users' >\r\n            {userCards}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Users;","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport Loader from './Loader'\nimport Users from './Users'\nimport $ from 'jquery'\n\nconst App = () => {\n\tconst [users, setUsers] = useState('')\n\tconst [noMoreUsers, setNoMoreUsers] = useState(false)\n\tuseEffect(() => {\n\t\tfetch('https://reqres.in/api/users?page=1')\n\t\t\t.then(res => res.json())\n\t\t\t.then(data => {\n\t\t\t\tsetTimeout(() => setUsers(data.data), 3000)\n\t\t\t})\n\n\t\t$(window).scroll(function() {\n\t\t\tif( $(window).scrollTop() >= $(document).height() - $(window).height() - 1 ) {\n\t\t\t\tfetch('https://reqres.in/api/users?page=2')\n\t\t\t\t\t.then(res => res.json())\n\t\t\t\t\t.then(data => {\n\t\t\t\t\t\tsetUsers(prevUsers => ([...prevUsers, ...data.data]))\n\t\t\t\t\t})\n\t\t\t\t$(window).off('scroll')\n\t\t\t\tsetNoMoreUsers(true)\n\t\t\t}\n\t\t});\n\t}, [])\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<h1>Users</h1>\t\n\t\t\t{ users ? <Users users={users} /> : <Loader /> }\n\t\t\t{ noMoreUsers && <p>No more users</p> }\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}